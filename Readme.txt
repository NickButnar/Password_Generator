Как это работает:

1) Создана функция prepareOptions с дефолтными значениями, которые записаны в объект, для генерации пароля: длина пароля 12, использовать
символы и цифры при генерации пароля. Это нужно для того, чтобы пароль генерировался, если пользователь
передал параметры при вызове функции generatePassword()

2) Создана функция checkError(), которая обрабатывает и выводит на экран тип ошибки, если пользователь присвоил
некорректные значения свойстам объектов.

3) Функция getRandomIndexOfArray() генерирует и возвращает рандомный индекс из массива.

4) В функции fillPasswordArray() прописаны условия для генерации пароля. В зависимости от условия берутся определенные массивы
для генерации.

5) В функцию generatePassword() переданы дефолтные опции для генерации в переменную preparedOptions. Обработчик ошибок checkError(), а так же
переменная passwordArray, которая является массивом из сгенерированных значений(индексов) других массивов. Методом join() 
превращаем массив в строку и получаем готовый пароль. 

--- Вызов функции/запуск генератора ---

a) console.log(generatePassword()) --> свойства не переданы(passwordLength, numbers, symbols).
Свойства по умолчанию: длина пароля: 12, цифры и символы используются.

b) generatePassword({ passwordLength: 10, numbers: false, symbols: false }) --> свойства переданы. 
Получим пароль 10, без цифр и символов.

с) Если один из параметров не прописать, то будет использоваться дефолтный. Например:
generatePassword({ symbols: false }) --> будет сгенерирован пароль длиной 12, с цифрами, но без символов.

Дефолтные параметры прописаны в функции prepareOptions()
